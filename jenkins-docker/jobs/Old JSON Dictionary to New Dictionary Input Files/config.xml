<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@332.va_1ee476d8f6d">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/ETL-MissionControl-dbgap-submodule</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/genomicIngestion</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
aws sts assume-role --duration-seconds 3600 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt
        
export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
mkdir oldData
#aws s3 cp s3://avillach-73-bdcatalyst-etl/newDictionary/metadata.json oldData/metadata.json
#aws s3 cp s3://avillach-73-bdcatalyst-etl/newDictionary/dictionary.json oldData/dictionary.json
#aws s3 cp s3://avillach-73-bdcatalyst-etl/newDictionary/managed_inputs.csv oldData/managed_inputs.csv

aws s3 cp s3://avillach-73-bdcatalyst-etl/general/data/metadata_new_search.json oldData/metadata.json
aws s3 cp s3://avillach-73-bdcatalyst-etl/general/hpds/javabin/dictionary.json oldData/dictionary.json
aws s3 cp s3://avillach-73-bdcatalyst-etl/general/resources/Managed_Inputs.csv oldData/managed_inputs.csv

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

csvcut -c 1,2,4,5,10,11,13,14,16 oldData/managed_inputs.csv &gt; inputs.csv
IFS=&apos;,&apos;
[ ! -f inputs.csv ]
while read study_abv study_id study_name data_type study_focus study_design version phase additional_info
do
mkdir ${study_id}
echo &quot;${study_id},${study_name},${study_abv},,${data_type},${study_focus},${study_design},${version},${phase},${additional_info}&quot; &gt;&gt; ${study_id}/datasets.csv
jq &apos;with_entries(select(.key | contains(&quot;&apos;${study_id}&apos;&quot;)))&apos; oldData/dictionary.json &gt; ${study_id}/subset_dictionary.json
jq &apos;[.bio_data_catalyst[] | select(.&quot;study_identifier&quot;==&quot;&apos;${study_id}&apos;&quot;)]&apos; oldData/metadata.json &gt; ${study_id}/subset_metadata.json

java -jar jars/NewDictionaryConverter.jar --subsetDir &quot;./${study_id}/&quot;

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
aws s3 cp ./${study_id}/ s3://avillach-73-bdcatalyst-etl/newDictionary/${study_id}/ --recursive --exclude &apos;*&apos; --include &apos;*.csv&apos;
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

done  &lt; inputs.csv

</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>