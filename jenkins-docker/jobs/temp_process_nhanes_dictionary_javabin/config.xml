<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Imports data dictionaries into HPDS format.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@320.v5a_0933a_e7d61">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>arn-etl-role</name>
          <defaultValue>arn:aws:iam::736265540791:role/avillach-73-nhanes-s3-iam</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>git_hash</name>
          <defaultValue>*/als-3928</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/pic-sure-search-prototype</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${git_hash}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Maven>
      <targets>clean install -DskipTests</targets>
      <mavenName>Maven 3.6.3</mavenName>
      <pom>tagging/pom.xml</pom>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
######## adding pic-sure-resource build job to this
### Load Dictionary ETL Image
#aws s3 --sse=AES256 cp s3://${stack_s3_bucket}/releases/jenkins_pipeline_build_${pipeline_build_id}/pic-sure-hpds-dictionary.tar.gz pic-sure-hpds-dictionary.tar.gz
#aws s3 --sse=AES256 cp s3://${stack_s3_bucket}/data/${destination_bucket_hash}/javabins_rekeyed.tar.gz .

#tar -zxvf javabins_rekeyed.tar.gz columnMeta.csv conceptsToRemove.csv
GIT_BRANCH_SHORT=`echo ${GIT_BRANCH} | cut -d &quot;/&quot; -f 2` 
GIT_COMMIT_SHORT=`echo ${GIT_COMMIT} | cut -c1-7`

cd tagging

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

aws sts assume-role --duration-seconds 3600 --role-arn arn:aws:iam::736265540791:role/avillach-73-nhanes-s3-iam --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

# Pull columnMeta.csv
aws s3 cp s3://avillach-73-nhanes-etl/hpds/javabin/columnMeta_full.csv ./local/source/columnMeta.csv

# Adding the files to the docker container that is needed is much better practice then doing the volume mounting 
# that is currently being done in the docker run.  Will investigate further if that is possible. TD
#aws s3 cp s3://avillach-73-bdcatalyst-etl/general/resources/dictionary_control_file.csv ./configs/dictionary_control_file.csv

mkdir -p tmp/
mkdir -p local
mkdir -p local/source
mkdir -p output/
mkdir -p configs/

#cp columnMeta.csv local/source/
#cp conceptsToRemove.csv local/source/

### Pull data set to rekey.
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

#### Execute dictionary import
#build image
docker build -t hms-dbmi/pic-sure-hpds-dictionary:${GIT_BRANCH_SHORT}_${GIT_COMMIT_SHORT} -f Dockerfile_hpds_dictionary .

docker save hms-dbmi/pic-sure-hpds-dictionary:${GIT_BRANCH_SHORT}_${GIT_COMMIT_SHORT} | gzip &gt; pic-sure-hpds-dictionary.tar.gz

HPDS_ETL_IMAGE=`docker load &lt; ./pic-sure-hpds-dictionary.tar.gz  | cut -d &apos; &apos; -f 3`

echo $HPDS_ETL_IMAGE
touch ./local/source/conceptsToRemove.csv
# volume mount pwd that contains original data files as /opt/local/source/
#
mkdir -p &quot;${WORKSPACE}&quot;/tagging/output
docker run -i -v &quot;${WORKSPACE}&quot;/tagging/local/source:/local/source/ -v &quot;${WORKSPACE}&quot;/tagging/output:/usr/local/docker-config/search/ -eLOADER_NAME=DictionaryImporterUtil $HPDS_ETL_IMAGE

cd &quot;$WORKSPACE&quot;/tagging/output
ts=$(date &apos;+%m-%d-%y&apos;)
tar -cvzf dictionary_javabin_sample.tar.gz *.javabin 

aws sts assume-role --duration-seconds 3600 --role-arn arn:aws:iam::736265540791:role/avillach-73-nhanes-s3-iam --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws s3 --sse=AES256 cp dictionary_javabin_full.tar.gz  s3://avillach-73-nhanes-etl/hpds/javabin/

#aws s3 --sse=AES256 cp Missing_Dictionary_Entries.csv s3://avillach-73-bdcatalyst-etl/general/hpds/javabin/Missing_Dictionary_Entries_${ts}.csv

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>