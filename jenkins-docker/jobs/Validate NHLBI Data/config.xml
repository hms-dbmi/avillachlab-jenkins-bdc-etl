<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Will try to track efforts taken manually to validate NHLBI data exists before.&#xd;
&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@332.va_1ee476d8f6d">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

mkdir -p downloads  # Ensure the downloads directory exists

# Boolean flag to control data download and decompression
DOWNLOAD_DATA=true  # Set to true or false as needed
DECOMPRESS_GZ=true  # Set to true or false as needed

# Function to assume an AWS role
assume_aws_role() {
  local role_arn=&quot;$1&quot;

  echo &quot;Assuming role: $role_arn&quot;
  creds=$(aws sts assume-role --role-arn &quot;$role_arn&quot; --role-session-name &quot;get-phenotypic-data&quot;)

  if [[ -z &quot;$creds&quot; ]]; then
    echo &quot;Failed to assume role: $role_arn&quot;
    return 1
  fi

  export AWS_ACCESS_KEY_ID=$(echo &quot;$creds&quot; | jq -r &apos;.Credentials.AccessKeyId&apos;)
  export AWS_SECRET_ACCESS_KEY=$(echo &quot;$creds&quot; | jq -r &apos;.Credentials.SecretAccessKey&apos;)
  export AWS_SESSION_TOKEN=$(echo &quot;$creds&quot; | jq -r &apos;.Credentials.SessionToken&apos;)
}

reset_aws_role() {
  export AWS_ACCESS_KEY_ID=&quot;$ORIGINAL_AWS_ACCESS_KEY_ID&quot;
  export AWS_SECRET_ACCESS_KEY=&quot;$ORIGINAL_AWS_SECRET_ACCESS_KEY&quot;
  export AWS_SESSION_TOKEN=&quot;$ORIGINAL_AWS_SESSION_TOKEN&quot;
}

# Function to check if an S3 bucket exists
check_s3_bucket() {
  local bucket_name=&quot;$1&quot;

  if aws s3 ls &quot;s3://$bucket_name&quot; &gt; /dev/null 2&gt;&amp;1; then
    echo &quot;$bucket_name exists in this account.&quot;
    return 0
  else
    echo &quot;$bucket_name does NOT exist in this account.&quot;
    return 1
  fi
}

# Function to download data from an S3 bucket
download_s3_data() {
  local bucket_name=&quot;$1&quot;

  echo &quot;Downloading data from: s3://$bucket_name to downloads/${bucket_name}/&quot;
  mkdir -p &quot;downloads/${bucket_name}&quot;
  aws s3 sync &quot;s3://$bucket_name&quot; &quot;downloads/${bucket_name}/&quot;

  if [[ $? -eq 0 ]]; then
    echo &quot;Download completed for bucket: $bucket_name&quot;
    # Decompress if enabled
    if [[ &quot;$DECOMPRESS_GZ&quot; == &quot;true&quot; ]]; then
      decompress_gz_files &quot;downloads/${bucket_name}&quot;
    fi
  else
    echo &quot;Download failed for bucket: $bucket_name&quot;
  fi
}

# Function to decompress .txt.gz files
decompress_gz_files() {
  local directory=&quot;$1&quot;

  echo &quot;Decompressing .txt.gz files in: $directory&quot;
  find &quot;$directory&quot; -type f -name &quot;*.txt.gz&quot; -print0 | while IFS= read -r -d &apos;&apos; file; do
    gunzip -c &quot;$file&quot; &gt; &quot;${file%.gz}&quot; &amp;&amp; echo &quot;Decompressed: $file&quot;
  done
}

# Buckets to check
buckets=(&apos;nih-nhlbi-topmed-phs000280-v8-c1&apos; &apos;nih-nhlbi-topmed-phs000280-v8-c2&apos;)

# Accounts and corresponding IAM roles
accounts=(
  &quot;arn:aws:iam::600168050588:role/nih-nhlbi-TopMed-EC2Access-S3&quot;
  &quot;arn:aws:iam::714862078411:role/nih-nhlbi-TopMed-EC2Access-S3&quot;
)

# Loop through each bucket
for bucket in &quot;${buckets[@]}&quot;; do
  echo &quot;Checking bucket: $bucket&quot;
  reset_aws_role
  for account_role in &quot;${accounts[@]}&quot;; do
    assume_aws_role &quot;$account_role&quot;

    if check_s3_bucket &quot;$bucket&quot;; then
      echo &quot;Bucket $bucket is in account: $account_role&quot;
      
      # Download the data if DOWNLOAD_DATA is true
      if [[ &quot;$DOWNLOAD_DATA&quot; == &quot;true&quot; ]]; then
        download_s3_data &quot;$bucket&quot;
      fi

      break
    fi
    reset_aws_role
  done

  echo &quot;----------------------------------&quot;
done</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.47">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>