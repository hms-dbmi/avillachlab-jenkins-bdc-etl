<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>managed_inputs</name>
          <defaultValue>s3://avillach-73-bdcatalyst-etl/general/resources/Managed_Inputs.csv</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>metadata_file</name>
          <defaultValue>s3://avillach-73-bdcatalyst-etl/general/data/metadata.json</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/ETL-MissionControl-dbgap-submodule</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

### assume etl role
aws sts assume-role --duration-seconds 900 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

mkdir data
mkdir completed
mkdir hierarchies
mkdir processing
mkdir etl-reports-dictionary/

mkdir etl-reports-data-analyzer/
find data/ -type f -exec rm -rf {} \;
find processing/ -type f -exec rm -rf {} \;
find completed/ -type f -exec rm -rf {} \;

rm -rf pic-sure-hpds/

aws s3 cp ${managed_inputs} data/

aws s3 cp ${metadata_file} data/metadata.json

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

awk -F, &apos;{print $1&quot;,&quot;$2&quot;,&quot;$3&quot;,&quot;$8&quot;,&quot;$9}&apos; data/Managed_Inputs.csv &gt; inputs.csv

# Generate mappings
cat	inputs.csv
IFS=&apos;,&apos;
[ ! -f inputs.csv ]
while read abv_name stdy_id stdy_type data_ready data_processed
do
  if [[ &quot;${data_ready,,}&quot; == &quot;yes&quot; ]]; then

	  
    ### assume etl role
    aws sts assume-role --duration-seconds 900 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt
    
    export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
    export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
    export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
    
    aws s3 cp s3://avillach-73-bdcatalyst-etl/${abv_name,,}/reports/${stdy_id,,}/etl-reports.tar.gz etl-reports-dictionary/
    
    aws s3 cp s3://avillach-73-bdcatalyst-etl/${abv_name,,}/reports/${stdy_id,,}/etl-reports-data-analyzer.tar.gz etl-reports-data-analyzer/
    
    cd etl-reports-dictionary/
    
    ls -la
    
    tar -zxvf etl-reports.tar.gz
    
    cd ../etl-reports-data-analyzer/
    
    tar -zxvf etl-reports-data-analyzer.tar.gz
    
    head -1 reports/${abv_name^^}_VariableAnalysisOverview.csv &gt; da_overview.csv | grep -v &quot;FILENAME&quot; reports/${abv_name^^}_VariableAnalysisOverview.csv &gt;&gt; da_overview.csv
    
    mv da_overview.csv reports/${abv_name^^}_VariableAnalysisOverview.csv
    
    rm etl-reports-data-analyzer.tar.gz
    
    tar -zvcf etl-reports-data-analyzer.clean.tar.gz reports/*
    
    aws s3 cp etl-reports-data-analyzer.clean.tar.gz s3://avillach-73-bdcatalyst-etl/${abv_name,,}/reports/${stdy_id}/
    
    cd ${WORKSPACE}
    
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN

  fi
done  &lt; inputs.csv</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>