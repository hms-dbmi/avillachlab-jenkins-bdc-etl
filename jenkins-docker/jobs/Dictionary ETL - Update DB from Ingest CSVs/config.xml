<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@332.va_1ee476d8f6d">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>api</name>
          <description>the url for the api calls</description>
          <defaultValue>http://172.20.0.3:8086/api</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>datasetId</name>
          <defaultValue>phs001013</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

aws sts assume-role --duration-seconds 3600 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt
        
export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
mkdir ${datasetId}
aws s3 cp s3://avillach-73-bdcatalyst-etl/newDictionary/${datasetId}/ ./${datasetId}/ --recursive 
sed -i &apos;1s/^/ref,full_name,abbreviation,description,data_type,study_focus,study_design,version,phase,additional_information\n/&apos; ${datasetId}/datasets.csv
sed -i &apos;1s/^/&quot;datasetRef&quot;,&quot;consentCode&quot;,&quot;description&quot;,&quot;participantCount&quot;,&quot;variableCount&quot;,&quot;sampleCount&quot;,&quot;authz&quot;\n/&apos; ${datasetId}/consents.csv
sed -i &apos;1s/^/datasetRef,name,display,conceptType,conceptPath,parentConceptPath,values,description,stigmatized\n/&apos; ${datasetId}/concepts.csv

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

#dataset insert
csvcut -c 1,2,3,4 ${datasetId}/datasets.csv &gt; ${datasetId}/dataset_table.csv
IFS=&apos;,&apos;
#core dataset entry
while read datasetRef fullName abv desc
do
	if [[ ${datasetRef} != &apos;ref&apos; ]]; then
    	curl --request PUT --data-urlencode &quot;datasetRef=${datasetRef}&quot; --data-urlencode &quot;abv=${abv}&quot; \
        	--data-urlencode &quot;fullName=${fullName}&quot; --data-urlencode &quot;desc=${desc}&quot; ${api}/dataset
	fi
done &lt; ${datasetId}/dataset_table.csv

#dataset meta entry
csvcut -c 1,5- ${datasetId}/datasets.csv &gt; ${datasetId}/dataset_meta_table.csv
export columncount=`csvcut -n ${datasetId}/dataset_meta_table.csv | wc -l`
for ((i = 2 ; i &lt; ${columncount}+1 ; i++ ));
do
    keyname=`csvcut -c ${i} ${datasetId}/dataset_meta_table.csv | csvcut -n | cut -c6-`
    echo $keyname
    csvcut -c 1,${i} ${datasetId}/dataset_meta_table.csv &gt; ${datasetId}/dataset_meta_column.csv
    while read datasetRef values
    do
		if [[ ${datasetRef} != &apos;ref&apos; ]]; then
    		curl --request PUT --data-urlencode &quot;datasetRef=${datasetRef}&quot; --data-urlencode &quot;key=${keyname}&quot; \
        		--data-urlencode &quot;values=${values}&quot; ${api}/dataset/metadata
		fi    	
    done &lt; ${datasetId}/dataset_meta_column.csv
done

#consents insert
csvformat -D &apos;*&apos; -U 3 ./${datasetId}/consents.csv &gt; ./${datasetId}/consents_formatted.csv
IFS=&apos;*&apos;
while read datasetRef consentCode description participantCount variableCount sampleCount authz
do
	echo datasetRef $datasetRef
    echo description $description
    echo participantCount $participantCount
    if [[ ${datasetRef} != &apos;datasetRef&apos; ]]; then
        	curl --request PUT --data-urlencode &quot;datasetRef=${datasetRef}&quot; --data-urlencode &quot;consentCode=${consentCode}&quot; \
        	--data-urlencode &quot;description=${description}&quot; --data-urlencode &quot;authz=${authz}&quot; \
            --data-urlencode &quot;participantCount=${participantCount}&quot; --data-urlencode &quot;variableCount=${variableCount}&quot; --data-urlencode &quot;sampleCount=${sampleCount}&quot; \
            ${api}/consent
    fi
done &lt; ./${datasetId}/consents_formatted.csv

#concept insert
csvcut -c 1,2,3,4,5,6 ${datasetId}/concepts.csv &gt; ${datasetId}/concept_table.csv
IFS=&apos;,&apos;
#core concept entry
while read datasetRef name display conceptType conceptPath parentPath
do
	if [[ ${datasetRef} != &apos;datasetRef&apos; ]]; then
    	curl --request PUT --data-urlencode &quot;datasetRef=${datasetRef}&quot; --data-urlencode &quot;name=${name}&quot; \
        	--data-urlencode &quot;display=${display}&quot; --data-urlencode &quot;conceptType=${conceptType}&quot; \
            --data-urlencode &quot;conceptPath=${conceptPath}&quot; --data-urlencode &quot;parentPath=${parentPath}&quot; \
            ${api}/concept
	fi
done &lt; ${datasetId}/concept_table.csv

#concept meta entry
csvcut -c 5,7- ${datasetId}/concepts.csv &gt; ${datasetId}/concept_meta_table.csv
export columncount=`csvcut -n ${datasetId}/concept_meta_table.csv | wc -l`
for ((i = 2 ; i &lt; ${columncount}+1 ; i++ ));
do
    keyname=`csvcut -c ${i} ${datasetId}/concept_meta_table.csv | csvcut -n | cut -c6-`
    echo $keyname
    csvcut -c 1,${i} ${datasetId}/concept_meta_table.csv | csvformat -D &apos;*&apos; &gt; ${datasetId}/concept_meta_column.csv
    IFS=&apos;*&apos;
    while read conceptPath values
    do
		if [[ ${conceptPath} != &apos;conceptPath&apos; ]]; then
            export encodedConceptPath=$(echo -n $conceptPath | jq -sRr @uri)
            export encodedKeyName=$(echo -n $keyname | jq -sRr @uri)
    		curl --request PUT  --header &apos;Content-Type: text/plain&apos; \
            	--data &quot;${values}&quot; &quot;${api}/concept/metadata?conceptPath=${encodedConceptPath}&amp;key=${encodedKeyName}&quot;
		fi    	
    done &lt; ${datasetId}/concept_meta_column.csv
done

</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>