<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>The purpose of this job is to correlate Patients between two different studies.  The studies must contain a mapping file that can correlate the unique patient identifiers between the two studies.&#xd;
&#xd;
Currently the only supported mapping file for this correlation is the subject.multi file provided by dbgap.  Requirements for the mapping are below.&#xd;
&#xd;
Currently only able to map from a non-compliant study that has a subject.multi file to a related dbgap study.&#xd;
&#xd;
Requirements:&#xd;
* Subject.multi file must contain the unique subject identifiers used in both data sets in a single record.&#xd;
* The non-compliant subject.multi file MUST contain the dbgap_subject_id used in the target dbgap study.   This is because dbgap data uses the dbgap_subject_id in all of their data files.  Currently not supporting another level of mapping as the use case does not exist yet.&#xd;
&#xd;
&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@320.v5a_0933a_e7d61">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>source_dbgap_stdy_abv_name</name>
          <description>Dbgap study&apos;s abbreviated name.

Ex: CFS</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>target_stdy_abv_name</name>
          <description>Target study&apos;s abbreviated name.  Target Study is the study that will be correlated to dbgap.

Ex: NSRR_CFS</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>target_stdy_patient_id_header_name</name>
          <description>Column header name in the target study subject.multi file that contains the target study&apos;s patient identifiers.

Ex: SOURCE_SUBJECT_ID</description>
          <defaultValue>SOURCE_SUBJECT_ID</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>dbgap_stdy_patient_id_header_name</name>
          <description>Column header name in the target study subject.multi file that contains the DBGAP study&apos;s patient identifiers.
</description>
          <defaultValue>SOURCE_SUBJECT_ID2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/ETL-MissionControl-dbgap-submodule</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

### assume etl role
aws sts assume-role --duration-seconds 900 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

mkdir data

mkdir completed

# Download the related studies patient mapping file.
aws s3 cp s3://avillach-73-bdcatalyst-etl/${source_dbgap_stdy_abv_name,,}/data/${source_dbgap_stdy_abv_name^^}_PatientMapping.v2.csv data/

# Download the subject multi file for the study that needs to be correlated.
aws s3 cp s3://avillach-73-bdcatalyst-etl/${target_stdy_abv_name,,}/rawData/ data/ --recursive --exclude &quot;*&quot; --include &quot;*MULTI.txt&quot; --include &quot;*.Multi.txt&quot; --include &quot;*.multi.txt&quot;

java -jar jars/CorrelatePatientMappings.jar -source_dbgap_stdy_abv_name ${source_dbgap_stdy_abv_name,,} -target_stdy_abv_name ${target_stdy_abv_name,,} -target_stdy_patient_id_header_name ${target_stdy_patient_id_header_name} -dbgap_stdy_patient_id_header_name ${dbgap_stdy_patient_id_header_name} -patientmappingfile data/${source_dbgap_stdy_abv_name^^}_PatientMapping.v2.csv

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

aws sts assume-role --duration-seconds 3600 --role-arn arn:aws:iam::736265540791:role/dbgap-etl --role-session-name &quot;s3-test&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
        
aws s3 cp completed/${target_stdy_abv_name^^}_PatientMapping.v2.csv s3://avillach-73-bdcatalyst-etl/${target_stdy_abv_name,,}/data/</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>